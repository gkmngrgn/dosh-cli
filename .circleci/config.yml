version: 2.1

orbs:
  python: circleci/python@2
  windows: circleci/windows@5

aliases:
  - python-tag: &python-tag "3.10"
  - filters-release: &filters-release
      branches:
        only: main
      tags:
        only: /^v\d+\.\d+\.\d+$/
  - filters-development: &filters-development
      branches:
        ignore: main

jobs:
  lint:
    executor:
      name: "python/default"
      tag: *python-tag

    steps:
      - checkout
      - python/install-packages:
          pkg-manager: "poetry"
          args: "--no-ansi"
      - run:
          name: "Install pre-commit"
          command: poetry run pip install pre-commit
      - run:
          name: "Create a temporary file for getting a cache key"
          command: |
            cp .pre-commit-config.yaml /tmp/checksum.txt
            poetry run python --version >> /tmp/checksum.txt
      - restore_cache:
          key: pre-commit-{{ checksum "/tmp/checksum.txt" }}
      - run:
          name: "Run pre-commit"
          command: poetry run pre-commit run --all-files
      - save_cache:
          key: pre-commit-{{ checksum "/tmp/checksum.txt" }}
          paths:
            - ~/.cache/pre-commit

  lint-lua:
    docker:
      - image: pipelinecomponents/luacheck:latest

    steps:
      - checkout
      - run:
          name: "Check lua files"
          command: luacheck --globals=cmd --globals=env -- examples

  build-on-linux:
    parameters:
      resource_class:
        type: string

    machine:
      image: ubuntu-2204:current

    resource_class: << parameters.resource_class >>

    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: |
            sudo apt-get update
            sudo apt-get install -y patchelf
      - run:
          name: "Build project"
          command: ./build_with_nuitka.sh
      - persist_to_workspace:
          root: "."
          paths:
            - "dosh-cli-linux-*"

  build-on-macos:
    macos:
      xcode: 14.2.0

    steps:
      - checkout
      - run:
          name: "Add symlinks for python and pip"
          command: |
            mkdir -p ~/.local/bin
            ln -s $(which python3) ~/.local/bin/python
            ln -s $(which pip3) ~/.local/bin/pip
      - run:
          name: "Build project"
          command: ./build_with_nuitka.sh
      - persist_to_workspace:
          root: "."
          paths:
            - "dosh-cli-darwin-*"

  build-on-windows:
    executor:
      name: windows/default
      shell: bash.exe

    steps:
      - checkout
      - run:
          name: "Build project"
          command: ./build_with_nuitka.sh
      - persist_to_workspace:
          root: "."
          paths:
            - "dosh-cli-windows-*"

  release:
    docker:
      - image: cimg/base:stable

    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Archive"
          command: for i in dosh-cli-*/; do zip -r "${i%/}.zip" "$i" && rm -rf "$i"; done
      - store_artifacts:
          path: .

workflows:
  pr-checks:
    jobs:
      - lint:
          filters: *filters-development
      - lint-lua:
          filters: *filters-development
      - python/test:
          pkg-manager: poetry
          test-tool: pytest
          matrix:
            parameters:
              version: ["3.8", "3.9", "3.10", "3.11"]
          filters: *filters-development

  main:
    jobs:
      - build-on-linux:
          name: build-on-linux-<< matrix.resource_class >>
          matrix:
            parameters:
              resource_class: ["medium", "arm.medium"]
          filters: *filters-release
      - build-on-macos:
          filters: *filters-release
      - build-on-windows:
          filters: *filters-release
      - release:
          requires:
            - build-on-linux-medium
            - build-on-linux-arm.medium
            - build-on-macos
            - build-on-windows
          filters: *filters-release
